var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.expectors=exports.mocks=exports.renderers=exports.data=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime/helpers/extends"));var _immutable=_interopRequireDefault(require("immutable"));var _react=_interopRequireDefault(require("react"));var _reactNative=require("react-native");var _deprecatedReactNativeListview=require("deprecated-react-native-listview");var _reactTestRenderer=_interopRequireDefault(require("react-test-renderer"));var _ImmutableListView=require("./ImmutableListView");var _ImmutableVirtualizedList=require("./ImmutableVirtualizedList");var _jsxFileName="/Users/fitz/Projects/react-native-immutable-list-view/src/test-utils.js";var data={EMPTY_DATA:_immutable.default.List(),LIST_DATA:_immutable.default.List(['lists','are','great']),LIST_DATA_NESTED:_immutable.default.List([['so','are'],['nested','lists']]),MAP_DATA_LIST_ROWS:_immutable.default.fromJS({first:['m','a','p'],second:['foo'],third:[],fourth:['bar']}),MAP_DATA_MAP_ROWS:_immutable.default.fromJS({first:{row1:'data 1',row2:'data 2'},second:{}}),SET_DATA:_immutable.default.Set(['one','two','three']),RANGE_DATA:_immutable.default.Range(3,10,3)};exports.data=data;var renderers={renderRow:function renderRow(rowData){return _react.default.createElement(_reactNative.Text,{__source:{fileName:_jsxFileName,lineNumber:74}},JSON.stringify(rowData));},renderItem:function renderItem(_ref){var item=_ref.item;return _react.default.createElement(_reactNative.Text,{__source:{fileName:_jsxFileName,lineNumber:79}},JSON.stringify(item));},renderSectionHeader:function renderSectionHeader(sectionData,category){return _react.default.createElement(_reactNative.Text,{header:true,__source:{fileName:_jsxFileName,lineNumber:87}},category+" ("+sectionData.size+" items)");}};exports.renderers=renderers;var mocks={getImmutableListViewWithoutProps:function getImmutableListViewWithoutProps(){jest.resetModules();var mockScrollView=function mockScrollView(_ref2){var children=_ref2.children;return _react.default.createElement('ScrollView',{},children);};jest.doMock('ScrollView',function(){return mockScrollView;});return require('./ImmutableListView').ImmutableListView;}};exports.mocks=mocks;var expectors={expectToMatchSnapshotWithData:function expectToMatchSnapshotWithData(immutableData,shouldRenderSectionHeaders){var renderSectionHeaderProps=shouldRenderSectionHeaders?{renderSectionHeader:renderers.renderSectionHeader}:{};var tree=_reactTestRenderer.default.create(_react.default.createElement(_ImmutableListView.ImmutableListView,(0,_extends2.default)({immutableData:immutableData,renderRow:renderers.renderRow},renderSectionHeaderProps,{__source:{fileName:_jsxFileName,lineNumber:117}}))).toJSON();expect(tree).toMatchSnapshot();},expectVirtualizedToMatchSnapshotWithData:function expectVirtualizedToMatchSnapshotWithData(immutableData){var tree=_reactTestRenderer.default.create(_react.default.createElement(_ImmutableVirtualizedList.ImmutableVirtualizedList,{immutableData:immutableData,renderItem:renderers.renderItem,__source:{fileName:_jsxFileName,lineNumber:128}})).toJSON();expect(tree).toMatchSnapshot();},expectToMatchListViewWithData:function expectToMatchListViewWithData(immutableData,shouldRenderSectionHeaders){var MockedImmutableListView=mocks.getImmutableListViewWithoutProps();var dataSource=new _deprecatedReactNativeListview.ListView.DataSource({rowHasChanged:function rowHasChanged(r1,r2){return r1!==r2;},sectionHeaderHasChanged:function sectionHeaderHasChanged(s1,s2){return s1!==s2;}});var renderSectionHeaderProps=shouldRenderSectionHeaders?{renderSectionHeader:renderers.renderSectionHeader}:{};var immutableTree=_reactTestRenderer.default.create(_react.default.createElement(MockedImmutableListView,(0,_extends2.default)({immutableData:immutableData,renderRow:renderers.renderRow,renderEmptyInList:null},renderSectionHeaderProps,{__source:{fileName:_jsxFileName,lineNumber:149}}))).toJSON();var updatedDataSource=dataSource.cloneWithRows(immutableData.toJS());var regularTree=_reactTestRenderer.default.create(_react.default.createElement(_deprecatedReactNativeListview.ListView,(0,_extends2.default)({dataSource:updatedDataSource,renderRow:renderers.renderRow},renderSectionHeaderProps,{__source:{fileName:_jsxFileName,lineNumber:159}}))).toJSON();expect(immutableTree).toEqual(regularTree);}};exports.expectors=expectors;